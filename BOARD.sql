-- 테이블 생성

CREATE TABLE MEMBER (
    MID VARCHAR2(20) PRIMARY KEY,
    MPASS VARCHAR2(200) NOT NULL,
    MNAME NVARCHAR2(200) NOT NULL,
    MREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MDELYN CHAR(1) DEFAULT 'Y' NOT NULL
);

CREATE TABLE BOARD (
    BID NUMBER PRIMARY KEY,
    BNAME NVARCHAR2(20) NOT NULL,
    BREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    BDELYN CHAR(1) DEFAULT 'Y' NOT NULL
);

CREATE TABLE ARTICLE (
    AID NUMBER PRIMARY KEY,
    ATITLE NVARCHAR2(1000) NOT NULL,
    ACONTENT NVARCHAR2(2000),
    AREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    ACOUNT NUMBER DEFAULT 0 NOT NULL,
    AFCOUNT NUMBER DEFAULT 0 NOT NULL,
    ADELYN CHAR(1) DEFAULT 'Y' NOT NULL,
    MID VARCHAR2(20) REFERENCES MEMBER(MID),
    BID NUMBER REFERENCES BOARD(BID)
);

CREATE TABLE REPLY (
    RID NUMBER PRIMARY KEY,
    RCONTENT NVARCHAR2(2000) NOT NULL,
    RREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    RDELYN CHAR(1) DEFAULT 'Y' NOT NULL,
    AID NUMBER REFERENCES ARTICLE(AID),
    MID VARCHAR2(20) REFERENCES MEMBER(MID)
);

CREATE TABLE AFILE (
    AFID NUMBER PRIMARY KEY,
    AFSFNAME NVARCHAR2(500) NOT NULL,
    AFCFNAME NVARCHAR2(500) NOT NULL,
    AFREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    AFDENYN CHAR(1) DEFAULT 'Y' NOT NULL,
    AID NUMBER REFERENCES ARTICLE(AID)
);

--2) 시퀀스 생성 : SEQ_MEMBER, SEQ_BOARD, SEQ_ARTICLE, SEQ_REPLY, SEQ_AFILE

DROP SEQUENCE SEQ_BOARD;
DROP SEQUENCE SEQ_ARTICLE;
DROP SEQUENCE SEQ_REPLY;
DROP SEQUENCE SEQ_AFILE;

CREATE SEQUENCE SEQ_BOARD;
CREATE SEQUENCE SEQ_ARTICLE;
CREATE SEQUENCE SEQ_REPLY;
CREATE SEQUENCE SEQ_AFILE;


--5. DUMMY DATA 입력

--1) MEMBER 테이블
INSERT INTO MEMBER VALUES('HONG', 'HONG', '홍길동', SYSDATE, 'N');
INSERT INTO MEMBER VALUES('KANG', 'KANG', '강감찬', SYSDATE, 'N');
INSERT INTO MEMBER VALUES('LEE', 'LEE', '이순신', SYSDATE, 'N');
COMMIT;
SELECT * FROM MEMBER;

--2) BOARD 테이블
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '자유게시판', SYSDATE, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '사진게시판', SYSDATE, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '공지게시판', SYSDATE, 'N');
COMMIT;
SELECT * FROM BOARD;

--3) ARTICLE 테이블
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 3);
COMMIT;
SELECT * FROM ARTICLE;

--4) REPLY 테이블
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
COMMIT;
SELECT * FROM REPLY;

--5) AFILE 테이블
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
COMMIT;
SELECT * FROM AFILE;

--6. 뷰생성
CREATE OR REPLACE VIEW VW_MA AS --회원과 게시물 뷰
SELECT M.MID, M.MNAME, A.AID, A.ATITLE, A.ACONTENT, 
		A.AREGDATE, A.ACOUNT, A.AFCOUNT
FROM MEMBER M JOIN ARTICLE A
ON M.MID = A.MID;
SELECT * FROM VW_MA;

CREATE OR REPLACE VIEW VW_BA AS --게시판과 게시물 뷰
SELECT B.BID, B.BNAME, A.AID, A.ATITLE, A.ACONTENT, 
		A.AREGDATE, A.ACOUNT, A.AFCOUNT
FROM BOARD B JOIN ARTICLE A
ON B.BID = A.BID;
SELECT * FROM VW_BA;

CREATE OR REPLACE VIEW VW_AR AS --게시물과 댓글 뷰
SELECT A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, A.AFCOUNT,
		R.RID, R.RCONTENT, R.RREGDATE 
FROM ARTICLE A LEFT OUTER JOIN REPLY R
ON A.AID = R.AID;
SELECT * FROM VW_AR;

CREATE OR REPLACE VIEW VW_AAF AS --게시물과 파일 뷰
SELECT A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, A.AFCOUNT,
		AF.AFID, AF.AFSFNAME, AF.AFCFNAME, AF.AFREGDATE
FROM ARTICLE A LEFT OUTER JOIN AFILE AF
ON A.AID = AF.AID;
SELECT * FROM VW_AAF;

CREATE OR REPLACE VIEW VW_PK AS --게시판, 게시물, 댓글, 회원, 파일 전체 뷰
SELECT A.AID, R.RID, B.BID, AF.AFID 
FROM ARTICLE A LEFT OUTER JOIN REPLY R ON A.AID = R.AID
	LEFT OUTER JOIN BOARD B ON A.BID = B.BID 
	LEFT OUTER JOIN AFILE AF ON A.AID = AF.AID;

SELECT * FROM VW_PK;

CREATE OR REPLACE PROCEDURE BOARD.P(P_STR VARCHAR2)
IS 
BEGIN 
	DBMS_OUTPUT.PUT_LINE(P_STR);
END;
--7. PROCEDURE 생성
--1) 회원아이디를 입력하면 회원이 작성한 게시물 수를 출력하는 PROC_MACOUNT
CREATE OR REPLACE PROCEDURE PROC_MACOUNT(P_MID IN VARCHAR2)
IS
	V_COUNT NUMBER; 
BEGIN
	SELECT COUNT(*) INTO V_COUNT
	FROM VW_MA
	WHERE MID = P_MID;
	P(P_MID||'의 게시물의 수:'||V_COUNT||'개');
END;

BEGIN
	PROC_MACOUNT('HONG');
END;

--1) 회원아이디를 입력하면 회원이 작성한 게시물 수를 출력하는 PROC_MACOUNT
CREATE OR REPLACE PROCEDURE PROC_MACOUNT
   (P_MID MEMBER.MID%TYPE)
IS 
   V_MID MEMBER.MID%TYPE;
BEGIN 
   SELECT COUNT(*) INTO V_MID
   FROM ARTICLE
   WHERE MID = P_MID;
   DBMS_OUTPUT.PUT_LINE(V_MID);
END;

BEGIN
   PROC_MACOUNT('HONG');
END;

SELECT * FROM ARTICLE;

--2) 게시물아이디를 입력하면 게시물 조회수를 1 증가시키는 PROC_ACOUNT
CREATE OR REPLACE PROCEDURE PROC_ACOUNT(P_AID NUMBER)
IS
BEGIN
	UPDATE ARTICLE SET ACOUNT = ACOUNT+1 WHERE AID = P_AID;
	COMMIT;
END;

BEGIN
	PROC_ACOUNT(1);
END;

SELECT * FROM VW_AR;

--2) 게시물아이디를 입력하면 게시물 조회수를 1 증가시키는 PROC_ACOUNT
CREATE OR REPLACE PROCEDURE PROC_ACOUNT
   (P_AID ARTICLE.AID%TYPE)
IS 
BEGIN 
   UPDATE ARTICLE SET ACOUNT = ACOUNT + 1
   WHERE AID = P_AID;   
END;

BEGIN
   PROC_ACOUNT(1);
END;
SELECT * FROM ARTICLE;

--8. FUNCTION 생성
--1)  게시물아이디를 입력하면 게시물에 대한 댓글 수를 반환하는 FUNC_REPLYCOUNT
CREATE OR REPLACE FUNCTION FUNC_BRCOUNT(P_AID VW_AR.AID%TYPE)
RETURN NUMBER
IS
	V_REPLYCOUNT NUMBER;
BEGIN
	SELECT COUNT(*) INTO V_REPLYCOUNT
	FROM VW_AR
	WHERE AID = P_AID;
	RETURN V_REPLYCOUNT;
END;

SELECT FUNC_BRCOUNT(10) FROM DUAL;

--1) 게시물아이디를 입력하면 게시물에 대한 댓글 수를 반환하는 FUNC_REPLYCOUNT
CREATE OR REPLACE FUNCTION FUNC_REPLYCOUNT
(P_AID ARTICLE.AID%TYPE)
RETURN NUMBER
IS 
   V_REPLYCOUNT NUMBER;
BEGIN 
   SELECT COUNT(*) INTO V_REPLYCOUNT
   FROM REPLY
   WHERE AID = P_AID;
   RETURN V_REPLYCOUNT;
END;
SELECT FUNC_REPLYCOUNT(1) FROM DUAL;

--2) 회원아이디를 입력하면 회원이 작성한 게시물 수와 댓글 수를 반환하는 FUNC_MBRCOUNT
CREATE OR REPLACE TYPE OBJ_ARCOUNT AS OBJECT(
	V_ACOUNT NUMBER,
	V_REPLY NUMBER
);
SELECT * FROM USER_OBJECTS WHERE OBJECT_NAME = 'OBJ_COUNT';

CREATE OR REPLACE FUNCTION FUNC_MBRCOUNT(P_MID MEMBER.MID%TYPE)
RETURN OBJ_ARCOUNT
IS
	V_OBJ_ARCOUNT OBJ_ARCOUNT;
BEGIN
	V_OBJ_ARCOUNT := OBJ_ARCOUNT(0,0);
	
	SELECT COUNT(*) INTO V_OBJ_ARCOUNT.V_ACOUNT
	FROM MEMBER M, ARTICLE A
	WHERE M.MID = A.MID
		AND M.MID = P_MID;
	
	SELECT COUNT(*) INTO V_OBJ_ARCOUNT.V_REPLY
	FROM MEMBER M, REPLY R
	WHERE M.MID = R.MID
		AND M.MID = P_MID;

	RETURN V_OBJ_ARCOUNT;
END;

DECLARE 
	V_OBJ_ARCOUNT OBJ_ARCOUNT;
BEGIN
	V_OBJ_ARCOUNT := FUNC_MBRCOUNT('HONG');
	P('게시물수:'||V_OBJ_ARCOUNT.V_ACOUNT||', 댓글수:'||V_OBJ_ARCOUNT.V_REPLY);
END;

--2) 회원아이디를 입력하면 회원이 작성한 게시물 수와 댓글 수를 반환하는 FUNC_MBRCOUNT
CREATE OR REPLACE TYPE OBJ_COUNT AS OBJECT (
   ARTICLE_COUNT NUMBER,
   REPLY_COUNT NUMBER
);
SELECT * FROM USER_OBJECTS WHERE OBJECT_NAME = 'OBJ_COUNT';

CREATE OR REPLACE FUNCTION FUNC_MBRCOUNT
(P_MID MEMBER.MID%TYPE)
RETURN OBJ_COUNT
IS 
   V_OBJ_COUNT OBJ_COUNT;
BEGIN 
   V_OBJ_COUNT := OBJ_COUNT(0,0);
   SELECT 
      (SELECT COUNT(*) FROM ARTICLE WHERE MID = P_MID),
      (SELECT COUNT(*) FROM REPLY WHERE MID = P_MID)
   INTO V_OBJ_COUNT.   ARTICLE_COUNT, V_OBJ_COUNT.REPLY_COUNT
    FROM DUAL;
   RETURN V_OBJ_COUNT;
END;

DECLARE
   V_OBJ_COUNT OBJ_COUNT;
BEGIN
   V_OBJ_COUNT := OBJ_COUNT(0,0);
   V_OBJ_COUNT := FUNC_MBRCOUNT('HONG');
   DBMS_OUTPUT.PUT_LINE('게시물 수 : '||V_OBJ_COUNT.ARTICLE_COUNT);
   DBMS_OUTPUT.PUT_LINE('댓글 수 : '||V_OBJ_COUNT.REPLY_COUNT);
END;

--9. TRIGGER 생성
--1) 첨부파일테이블에 데이터가 입력되면 게시물테이블의 AFCOUNT를 1 증가시키는 TRG_AFCOUNT
CREATE OR REPLACE TRIGGER TRG_AFCOUNT
AFTER INSERT ON AFILE
FOR EACH ROW 
BEGIN
	UPDATE ARTICLE SET AFCOUNT = AFCOUNT+1 
	WHERE AID = :NEW.AID;
	COMMIT;
END;
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
SELECT * FROM AFILE;
SELECT * FROM ARTICLE;

--1) 첨부파일테이블에 데이터가 입력되면 게시물테이블의 AFCOUNT를 1 증가시키는 TRG_AFCOUNT
CREATE OR REPLACE TRIGGER TRG_AFCOUNT
AFTER INSERT ON AFILE
FOR EACH ROW
BEGIN 
   UPDATE ARTICLE SET AFCOUNT = AFCOUNT + 1
   WHERE AID = :NEW.AID;
END;

INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 1);
SELECT * FROM ARTICLE;


--2) 댓글이 등록되면 REPLY_BK 테이블에 회원아이디, 회원명, 댓글아이디, 댓글내용, 댓글등록일시를
--    등록하는 TRG_REPLY_BK
CREATE TABLE REPLY_BK(
	BK_MID VARCHAR2(200),
	BK_MNAME NVARCHAR2(200),
	BK_RID NUMBER,
	BK_RCONTENT NVARCHAR2(2000),
	BK_RREGDATE TIMESTAMP
);

CREATE OR REPLACE TRIGGER TRG_REPLY_BK
AFTER INSERT ON REPLY
FOR EACH ROW
DECLARE 
	V_NEWMID NVARCHAR2(200);
BEGIN
	SELECT MNAME INTO V_NEWMID
	FROM MEMBER
	WHERE MID = :NEW.MID;
	
	INSERT INTO REPLY_BK VALUES(:NEW.MID,V_NEWMID,:NEW.RID,:NEW.RCONTENT,:NEW.RREGDATE);
	COMMIT;
END;

INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
SELECT * FROM REPLY;
SELECT * FROM REPLY_BK;


--2) 댓글이 등록되면 REPLY_BK 테이블에 회원아이디, 회원명, 댓글아이디, 댓글내용, 댓글등록일시를
--    등록하는 TRG_REPLY_BK
DROP TABLE REPLY_BK;
CREATE TABLE REPLY_BK(
   MID VARCHAR2(20) NOT NULL,
   MNAME NVARCHAR2(200) NOT NULL,
   RID NUMBER NOT NULL,
   RCONTENT NVARCHAR2(2000),
   RREGDATE TIMESTAMP
);

CREATE OR REPLACE TRIGGER TRG_REPLY_BK
AFTER INSERT ON REPLY
FOR EACH ROW
DECLARE
    V_MNAME MEMBER.MNAME%TYPE;
BEGIN
    SELECT MNAME INTO V_MNAME
    FROM MEMBER
    WHERE MID = :NEW.MID;

    INSERT INTO REPLY_BK(MID, MNAME, RID, RCONTENT, RREGDATE)
    VALUES (:NEW.MID, V_MNAME, :NEW.RID, :NEW.RCONTENT, :NEW.REGDATE);
END;

INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
SELECT * FROM REPLY_BK;


--10. JOB 생성
--10초 간격으로 MEMBER_BK테이블에 MEMBER테이블을 백업하는 JOB_MEMBER_BK
--(MEMBER_BK 테이블은 MEMBER 테이블 구조를 복사)
CREATE TABLE MEMBER_BK AS SELECT * FROM MEMBER WHERE 1 = -1;
SELECT * FROM MEMBER_BK;

-- 프로그램 생성
BEGIN
	DBMS_SCHEDULER.CREATE_PROGRAM(
		PROGRAM_NAME => 'BORAD_SCH_PROG',
		PROGRAM_TYPE => 'STORED_PROCEDURE', 
		PROGRAM_ACTION => 'PROG_JOB',
		COMMENTS => 'board 스케줄러'
	);
END;
SELECT * FROM USER_SCHEDULER_JOBS;

CREATE OR REPLACE PROCEDURE PROC_MEMBER_BK_BACKUP
IS 
BEGIN 
	INSERT INTO MEMBER_BK 
	SELECT MID, MPASS, MNAME, MREGDATE, MDELYN 
	FROM MEMBER;
	COMMIT;
END;

BEGIN
	DBMS_SCHEDULER.CREATE_JOB(
		JOB_NAME => 'JOB_MEMBER_BK',
		JOB_TYPE => 'PLSQL_BLOCK',
		JOB_ACTION => 'BEGIN PROC_MEMBER_BK_BACKUP; END;',
		START_DATE => SYSTIMESTAMP,
		REPEAT_INTERVAL => 'FREQ=SECONDLY; INTERVAL=10',
		COMMENTS => 'BOARD - MEMBER 테이블 10초간격으로 백업'
	);
END;

BEGIN 
	DBMS_SCHEDULER.DISABLE('JOB_MEMBER_BK');	
END;

BEGIN
	DBMS_SCHEDULER.DROP_JOB('JOB_MEMBER_BK');	
END;




