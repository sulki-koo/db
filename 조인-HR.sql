-- JOIN

-- 1) INNER JOIN
-- 조인조건(양쪽에 같은 값을 갖는 컬럼)을 주고 조인

-- EMPLOYEES테이블과 DEPARTMENTS테이블 조인
-- EMPLOYEES테이블에 DEPARTMENT_ID가 NULL인 것이 하나 있음
SELECT E.EMPLOYEE_ID, D.DEPARTMENT_ID, D.DEPARTMENT_NAME 
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID; -- 106

SELECT COUNT(*) FROM EMPLOYEES; -- 107
SELECT COUNT(*) FROM DEPARTMENTS; -- 27
SELECT COUNT(*) FROM EMPLOYEES WHERE DEPARTMENT_ID IS NULL; -- 1

-- CARTESIAN JOIN
SELECT COUNT(*) FROM EMPLOYEES E, DEPARTMENTS D; -- 2889

-- EMPLOYEES와 DEPARTMENT INNER JOIN에 조건 부여
-- 50번 부서에 한정해서 조회
SELECT *
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
	AND D.DEPARTMENT_ID = 50;

-- 실습 1) COUNTRIES와 LOCATIONS INNER JOIN
SELECT *
FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID;

-- 실습 2) 실습 1에서 국가명이 'Italy'인 결과만 조회
SELECT *
FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID
	AND C.COUNTRY_NAME = 'Italy';

-- 실습 3) EMPLOYEES, JOB_HISTORY, JOBS INNER JOIN
-- 조인조건의 수는 조인하는 테이블 수 -1
SELECT *
FROM EMPLOYEES E, JOB_HISTORY JH, JOBS J
WHERE E.JOB_ID = JH.JOB_ID
	AND JH.JOB_ID = J.JOB_ID; 

-- ANSI - INNER JOIN
SELECT *
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- LEFT OUTER JOIN
-- 오른쪽 테이블에 조인조건에 해당하는 데이터가 없어도
-- 왼쪽테이블의 데이터는 모두 조회하도록 하는 조인
SELECT *
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);

-- ANSI -- LEFT OUTER JOIN
SELECT *
FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- RIGHT OUTER JOIN
-- 왼쪽 테이블에 조인조건에 해당하는 데이터가 없어도
-- 오른쪽테이블의 데이터는 모두 조회하도록 하는 조인
SELECT *
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID(+) = D.DEPARTMENT_ID;

-- ANSI - RIGHT OUTER JOIN
SELECT *
FROM EMPLOYEES E RIGHT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- FULL OUTER JOIN
-- LEFT OUTER JOIN 결과와 RIGHT OUTER JOIN 결과의 합집합
-- 오라클은 FULL OUTER JOIN을 지원하지 않음

-- ANSI - FULL OUTER JOIN
SELECT *
FROM EMPLOYEES E FULL OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

-- SELF JOIN
-- 물리적으로 하나의 테이블을 논리적으로 두개로 두고 조인
SELECT *
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.MANAGER_ID = E2.EMPLOYEE_ID;

-- 실습) MANAGER_ID가 100번인 직원들의 정보
SELECT *
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.MANAGER_ID = E2.EMPLOYEE_ID
	AND E1.MANAGER_ID = 100;
