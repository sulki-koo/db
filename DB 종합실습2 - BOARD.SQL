-- 종합실습2-BOARD.sql


1. 계정생성 : BOARD/BOARD 계정 생성하고 CONNECT, RESOURCE 롤을 부여
CMD > SQLPLUS CONN AS SYSDBA
SQLPLUS > CREATE USER BOARD IDENTIFIED BY BOARD;
SQLPLUS > GRANT CONNECT, RESOURCE TO BOARD;


2. DBEAVER에 BOARD 커넥션 생성


3. 데이터베이스 설계 : ERWIN, 논리/물리 모델 설계, BOARD.ERWIN

1) 회원테이블 (MEMBER)
    : 회원아이디(MID), 비밀번호(MPASS), 회원명(MNAME), 등록일시(MREGDATE), 삭제여부(MDELYN)

2) 게시판테이블 (BOARD) 
    : 게시판아이디(BID), 게시판명(BNAME), 등록일시(BREGDATE), 삭제여부(BDELYN)

3) 게시물테이블 (ARTICLE) 
    : 게시물아이디(AID), 제목(ATITLE), 내용(ACONTENT), 등록일시(AREGDATE), 
      조회수(ACOUNT), 첨부파일수(AFCOUNT), 게시판아이디(BID), 회원아이디(MID), 삭제여부(ADELYN)

4) 댓글테이블 (REPLY) 
    : 댓글아이디(RID), 내용(RCONTENT), 등록일시(RREGDATE), 게시물아이디(AID),
      회원아이디(MID), 삭제여부(RDELYN)

5) 파일테이블 (AFILE)
    : 파일아이디(AFID), 서버파일명(AFSFNAME), 클라이언트파일명(AFCFNAME), 등록일시(AFREGDATE),
      게시물아이디(AID), 삭제여부(AFDELYN)


4. DBEAVER에서 테이블/시퀀스 생성 (BOARD.SQL)

1) 테이블 생성

CREATE TABLE MEMBER (
    MID VARCHAR2(20) PRIMARY KEY,
    MPASS VARCHAR2(200) NOT NULL,
    MNAME NVARCHAR2(200) NOT NULL,
    MREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MDELYN CHAR(1) DEFAULT 'Y' NOT NULL
);

CREATE TABLE BOARD (
    BID NUMBER PRIMARY KEY,
    BNAME NVARCHAR2(20) NOT NULL,
    BREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    BDELYN CHAR(1) DEFAULT 'Y' NOT NULL
);

CREATE TABLE ARTICLE (
    AID NUMBER PRIMARY KEY,
    ATITLE NVARCHAR2(1000) NOT NULL,
    ACONTENT NVARCHAR2(4000),
    AREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    ACOUNT NUMBER DEFAULT 0 NOT NULL,
    AFCOUNT NUMBER DEFAULT 0 NOT NULL,
    ADELYN CHAR(1) DEFAULT 'Y' NOT NULL,
    MID VARCHAR2(20) REFERENCES MEMBER(MID),
    BID NUMBER REFERENCES BOARD(BID)
);

CREATE TABLE REPLY (
    RID NUMBER PRIMARY KEY,
    RCONTENT NVARCHAR2(4000) NOT NULL,
    RREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    RDELYN CHAR(1) DEFAULT 'Y' NOT NULL,
    AID NUMBER REFERENCES ARTICLE(AID),
    MID VARCHAR2(20) REFERENCES MEMBER(MID)
);

CREATE TABLE AFILE (
    AFID NUMBER PRIMARY KEY,
    AFSFNAME NVARCHAR2(500) NOT NULL,
    AFCFNAME NVARCHAR2(500) NOT NULL,
    AFREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    AFDENYN CHAR(1) DEFAULT 'Y' NOT NULL,
    AID NUMBER REFERENCES ARTICLE(AID)
);

2) 시퀀스 생성 : SEQ_MEMBER, SEQ_BOARD, SEQ_ARTICLE, SEQ_REPLY, SEQ_AFILE

DROP SEQUENCE SEQ_BOARD;
DROP SEQUENCE SEQ_ARTICLE;
DROP SEQUENCE SEQ_REPLY;
DROP SEQUENCE SEQ_AFILE;

CREATE SEQUENCE SEQ_BOARD;
CREATE SEQUENCE SEQ_ARTICLE;
CREATE SEQUENCE SEQ_REPLY;
CREATE SEQUENCE SEQ_AFILE;


5. DUMMY DATA 입력

1) MEMBER 테이블
INSERT INTO MEMBER VALUES('HONG', 'HONG', '홍길동', SYSDATE, 'N');
INSERT INTO MEMBER VALUES('KANG', 'KANG', '강감찬', SYSDATE, 'N');
INSERT INTO MEMBER VALUES('LEE', 'LEE', '이순신', SYSDATE, 'N');
COMMIT;
SELECT * FROM MEMBER;

2) BOARD 테이블
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '자유게시판', SYSDATE, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '사진게시판', SYSDATE, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '공지게시판', SYSDATE, 'N');
COMMIT;
SELECT * FROM BOARD;

3) ARTICLE 테이블
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'HONG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSDATE, 0, 0, 'N', 'LEE', 3);
COMMIT;
SELECT * FROM ARTICLE;

4) REPLY 테이블
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSDATE, 'N', 2, 'KANG');
COMMIT;
SELECT * FROM REPLY;

5) AFILE 테이블
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSDATE, 'N', 3);
COMMIT;
SELECT * FROM AFILE;


6. VIEW 생성
GRANT CREATE VIEW TO BOARD;

1) VW_MA : 회원과 게시물 뷰
   회원아이디, 회원명, 게시물아이디, 제목, 내용, 게시물등록일시, 조회수, 첨부파일수

2) VW_BA : 게시판과 게시물 뷰
   게시판아이디, 게시판명, 게시물아이디, 제목, 내용, 게시물등록일시, 조회수, 첨부파일수

3) VW_AR : 게시물과 댓글 뷰(댓글 없어도 게시물 다 나와야 함)
   게시물아이디, 제목, 게시물내용, 게시물등록일시, 조회수, 첨부파일수, 댓글아이디, 댓글내용, 댓글등록일시

4) VW_AAF : 게시물과 파일 뷰(파일 없어도 게시물 다 나와야 함)
   게시물아이디, 제목, 게시물내용, 게시물등록일시, 조회수, 첨부파일수, 파일아이디, 서버파일명,
   클라이언트파일명, 파일등록일시

5) VW_PK : 게시판, 게시물, 댓글, 회원, 파일 PK들의 뷰


7. PROCEDURE 생성
1) 회원아이디를 입력하면 회원이 작성한 게시물 수를 출력하는 PROC_MACOUNT
2) 게시물아이디를 입력하면 게시물 조회수를 1 증가시키는 PROC_ACOUNT

8. FUNCTION 생성
1) 게시물아이드를 입력하면 게시물에 대한 댓글 수를 반환하는 FUNC_BRCOUNT
2) 회원아이드를 입력하면 회원이 작성한 게시물 수와 댓글 수를 반환하는 FUNC_MBRCOUNT

9. TRIGGER 생성
1) 첨부파일테이블에 데이터가 입력되면 게시물테이블의 AFOUNT를 1 증가시키는 TRG_AFCOUNT
2) 댓글이 등록되면 REPLY_BK 테이블에 회원아이디, 회원명, 
 댓글아이디, 댓글내용, 댓글등록일시를 등록하는 TRG_REPLY_BK

10. JOB 생성
10초 간격으로 MEMBER_BK테이블에 MEMBER테이블을 백업하는 JOB_MEMBER_BK
(MEMBER_BK 테이블은 MEMBER 테이블 구조를 복사)
CREATE TABLE MEMBER_BK AS SELECT * FROM MEMBER WHERE 1 = -1;













